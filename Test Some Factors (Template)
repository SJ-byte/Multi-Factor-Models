import math
import numpy as np
import pandas as pd
import datetime as dt
import talib
import matplotlib.pyplot as plt
from scipy.stats import ttest_ind
from scipy.stats import levene
period = 20 #统计间隔，统计这么长时间段内的收益
num = 20 #股票数量
start = '2010-01-01' #起始和终止时间
end = '2013-12-31'
def GetFactorResult(period,num,start,end):
    fundamental_df = get_fundamentals(
            query(
                fundamentals.eod_derivative_indicator.pb_ratio
            ), start)
    #fundamental_df
    a = fundamental_df.pb_ratio.T.dropna()
    a1 = a.sort(columns = a.columns.values[0])
    a2 = a.sort(columns = a.columns.values[0],ascending=False)
    a_low = a1[0:num]
    a_high = a2[0:num]
    low = a_low.T.columns.values
    high = a_high.T.columns.values
    low_price = get_price(list(low), start_date=start, end_date=end)['ClosingPx']
    high_price = get_price(list(high), start_date=start, end_date=end)['ClosingPx']
    low_series = low_price.T.mean()
    low_series = low_series / low_series[0]
    high_series = high_price.T.mean()
    high_series = high_series / high_series[0]
    plt.plot(high_series.index,high_series,'b',label = 'Higher Quantile')
    plt.plot(low_series.index,low_series,'r',label = 'Lower Quantile')
    plt.legend(loc='upper left')
    plt.title("Factor Performance")
    plt.xlabel("Time")
    plt.ylabel("Return")    
    low_series_cge = low_series.pct_change(period).dropna()
    high_series_cge = high_series.pct_change(period).dropna()
    return ttest_ind(high_series_cge,low_series_cge,equal_var=False).pvalue

GetFactorResult(period,num,start,end)
##########################################################################################################################
import math
import numpy as np
import pandas as pd
import datetime as dt
import talib
import matplotlib.pyplot as plt
from scipy.stats import ttest_ind
from scipy.stats import levene
period = 20 #统计间隔，统计这么长时间段内的收益
num = 20 #股票数量
start = '2010-01-01' #起始和终止时间
end = '2013-12-31'
def GetFactorResult(period,num,start,end):
    fundamental_df = get_fundamentals(
            query(
                fundamentals.eod_derivative_indicator.market_cap
            ), start)
    #fundamental_df
    a = fundamental_df.market_cap.T.dropna()
    a1 = a.sort(columns = a.columns.values[0])
    a2 = a.sort(columns = a.columns.values[0],ascending=False)
    a_low = a1[0:num]
    a_high = a2[0:num]
    low = a_low.T.columns.values
    high = a_high.T.columns.values
    low_price = get_price(list(low), start_date=start, end_date=end)['ClosingPx']
    high_price = get_price(list(high), start_date=start, end_date=end)['ClosingPx']
    low_series = low_price.T.mean()
    low_series = low_series / low_series[0]
    high_series = high_price.T.mean()
    high_series = high_series / high_series[0]
    plt.plot(high_series.index,high_series,'b',label = 'Higher Quantile')
    plt.plot(low_series.index,low_series,'r',label = 'Lower Quantile')
    plt.legend(loc='upper left')
    plt.title("Factor Performance")
    plt.xlabel("Time")
    plt.ylabel("Return")    
    low_series_cge = low_series.pct_change(period).dropna()
    high_series_cge = high_series.pct_change(period).dropna()
    return ttest_ind(high_series_cge,low_series_cge,equal_var=False).pvalue
    
GetFactorResult(period,num,start,end)

########################################################################################################################
AllStocks = all_instruments(type='CS', country='cn')['order_book_id']
start = '2010-01-01' #起始和终止时间
end = '2013-12-31'
startdate = start
enddate = end
num = 100
startdate1 = '2014-01-01'
enddate1 = '2016-06-01'
stock = AllStocks

def sharpe(stock,startdate,enddate):
    #print(stock)
    if len(stock) != 0 :
        prices = get_price(list(stock), startdate, end_date=enddate, frequency='1d', fields=None, adjusted=True)['OpeningPx']
    #print(stock,startdate,enddate)
        #print(prices.iloc[0:5])
        returns = pd.DataFrame(columns=(stock))
        ave = pd.Series(index=(stock))
        std = pd.Series(index=(stock))
        for i in list(range(1,np.shape(prices)[0]-1)):
            #print(i)
            returns.loc[i-1] = ((prices.iloc[i]/prices.iloc[i-1]-1))
            #Here by using .olc we defined the index value of the dataframe returns
        #print(returns[0:10])
        for i in list(range(1,len(stock))):
            #print(i)
            ave.iloc[i-1] = np.mean(returns[stock[i-1]])
            std.iloc[i-1] = np.std(returns[stock[i-1]])
        sharpe = (ave/std)*np.sqrt(252)
        return sharpe
    else:
        return pd.Series(-1000, index = ['000001.XSHE'])
    
#For the input of Performance Function, we require the indicator should have the same length as stock, 
#I will reindex it in the function
def Performance(indicators,stock,startdate1,enddate1,num):
    if (len(indicators)!=len(stock)):
        return 'ERROR'
    a = pd.Series(te, index = [stock])
    a = a.dropna()
    a.sort()
    a1 = a[0:num]
    a.sort(ascending=False)
    a2 = a[0:num]
    a_low = a1[0:num]
    a_high = a2[0:num]
    low = a_low.index.values
    high = a_high.index.values
    low_price = get_price(list(low), start_date=startdate1, end_date=enddate1)['ClosingPx']
    high_price = get_price(list(high), start_date=startdate1, end_date=enddate1)['ClosingPx']
    low_series = low_price.T.mean()
    low_series = low_series / low_series[0]
    high_series = high_price.T.mean()
    high_series = high_series / high_series[0]
    plt.plot(high_series.index,high_series,'b',label = 'Higher Quantile')
    plt.plot(low_series.index,low_series,'r',label = 'Lower Quantile')
    plt.legend(loc='upper left')
    plt.title("Factor Performance")
    plt.xlabel("Time")
    plt.ylabel("Return")
    low_series_cge = low_series.pct_change(period).dropna()
    high_series_cge = high_series.pct_change(period).dropna()
    return ttest_ind(high_series_cge,low_series_cge,equal_var=False).pvalue
    
    
te = sharpe(AllStocks,startdate,enddate)
Performance(te,stock,startdate1,enddate1,num)


###########################################################################################################################
AllStocks = all_instruments(type='CS', country='cn')['order_book_id']
start = '2010-01-01' #起始和终止时间
end = '2013-12-31'
startdate = start
enddate = end
num = 100
startdate1 = '2014-01-01'
enddate1 = '2016-06-01'
stock = AllStocks

def getreversal(indname,startdate,enddate):
    allstock = industry(indname)
    #print(allstock)
    if len(allstock) > 0:
        indreturn = getindave(indname,startdate,enddate)
        tempp = get_price(allstock, startdate, end_date=enddate, frequency='1d', fields=None, adjusted=True)
        if len(tempp) > 0:
            tempp = get_price(allstock, startdate, end_date=enddate, frequency='1d', fields=None, adjusted=True)['ClosingPx']
            ret = tempp.ix[-1,:]/tempp.ix[0,:]
            retcompare = ret - indreturn-1
            std = np.std(ret-1)
            return retcompare/std
        else:
            return pd.Series(-1000, index = ['000001.XSHE'])
    else:
        return pd.Series(-1000, index = ['000001.XSHE'])
    
    
def getindave(indname,startdate,enddate):
    allstock = industry(indname)
    if len(allstock) > 0:
        tempp = get_price(allstock, startdate, end_date=enddate, frequency='1d', fields=None, adjusted=True)
        if len(tempp) > 0:
            tempp = get_price(allstock, startdate, end_date=enddate, frequency='1d', fields=None, adjusted=True)['ClosingPx']
            ret = tempp.ix[-1,:]/tempp.ix[0,:]
            #print(np.mean(ret)-1)
            return np.mean(ret)-1
        else:
            return 1
    else:
        return 1
    
def IndustrySelect(startdate,enddate):
    allind = ['A01','A02','A03','A04','A05','B06','B07','B08','B09','B10','B11','B12','C13','C14','C15','C16','C17','C18','C19','C20','C21','C22','C23','C24','C25','C26','C27','C28','C29','C30','C31','C32','C33','C34','C35','C36','C37','C38','C39','C40','C41','C42','C43','D44','D45','D46','E47','E48','E49','E50','F51','F52','G53','G54','G55','G56','G57','G58','G59','G60','H61','H62','I63','I64','I65','J66','J67','J68','J69','K70','L71','L72','M73','M74','M75','N76','N77','N78','O79','O80','O81','P82','Q83','Q84','R85','R86','R87','R88','R89']
    # All Possible Industries
    StockTotal = pd.Series()
    for ind in allind:
        #stocks = industry(ind)
        #print(ind,startdate,enddate)
        StocksResult = getreversal(ind,startdate,enddate)
        StockTotal = StockTotal.append(StocksResult)
        #print(StockTotal[0:5])
    #StockTotal = StockTotal.dropna()
    #StockTotal[StockTotal.index.values == '000001.XSHE']
    StockTotal = StockTotal.order(ascending=False)
    return StockTotal
    #SelectedStocks = StockTotal.index.values[0:100]
    #context.Stocks = SelectedStocks
    #logger.info("Interested at stock: " + str(context.Stocks))
    #update_universe(context.Stocks)
    
#For the input of Performance Function, we require the indicator should have the same length as stock, 
#I will reindex it in the function
def PerformanceIndustry(indicators,stock,startdate1,enddate1,num):
    #if (len(indicators)!=len(stock)):
        #return 'ERROR'
    #a = pd.Series(te, index = [stock])
    a = indicators
    a = a.dropna()
    a.sort()
    a1 = a[0:num]
    a.sort(ascending=False)
    a2 = a[0:num]
    a_low = a1[0:num]
    a_high = a2[0:num]
    low = a_low.index.values
    high = a_high.index.values
    low_price = get_price(list(low), start_date=startdate1, end_date=enddate1)['ClosingPx']
    high_price = get_price(list(high), start_date=startdate1, end_date=enddate1)['ClosingPx']
    low_series = low_price.T.mean()
    low_series = low_series / low_series[0]
    high_series = high_price.T.mean()
    high_series = high_series / high_series[0]
    plt.plot(high_series.index,high_series,'b',label = 'Higher Quantile')
    plt.plot(low_series.index,low_series,'r',label = 'Lower Quantile')
    plt.legend(loc='upper left')
    plt.title("Factor Performance")
    plt.xlabel("Time")
    plt.ylabel("Return")
    low_series_cge = low_series.pct_change(period).dropna()
    high_series_cge = high_series.pct_change(period).dropna()
    return ttest_ind(high_series_cge,low_series_cge,equal_var=False).pvalue
    
    
indusind = IndustrySelect(startdate,enddate)
PerformanceIndustry(indusind,stock,startdate1,enddate1,num)

